# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './new_main_copy.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox
import Categories
import dialog_expenses
import mysql.connector
import sys
import datetime

###################################################################
#                                                                 #
#                       UI Generation                             #
#                                                                 #
###################################################################


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(628, 671)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tb_main = QtWidgets.QTabWidget(self.centralwidget)
        self.tb_main.setGeometry(QtCore.QRect(20, 0, 601, 591))
        self.tb_main.setTabPosition(QtWidgets.QTabWidget.North)
        self.tb_main.setElideMode(QtCore.Qt.ElideLeft)
        self.tb_main.setUsesScrollButtons(False)
        self.tb_main.setDocumentMode(False)
        self.tb_main.setTabsClosable(False)
        self.tb_main.setMovable(False)
        self.tb_main.setTabBarAutoHide(False)
        self.tb_main.setObjectName("tb_main")
        self.tb_categories = QtWidgets.QWidget()
        self.tb_categories.setObjectName("tb_categories")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tb_categories)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 571, 491))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tbl_5 = QtWidgets.QTableWidget(self.horizontalLayoutWidget_2)
        self.tbl_5.setObjectName("tbl_5")
        self.tbl_5.setColumnCount(2)
        self.tbl_5.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_5.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_5.setHorizontalHeaderItem(1, item)
        self.horizontalLayout_2.addWidget(self.tbl_5)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.btnNew_Cat = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnNew_Cat.setObjectName("btnNew_Cat")
        self.verticalLayout_2.addWidget(self.btnNew_Cat)
        self.btnEdit_Cat = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnEdit_Cat.setObjectName("btnEdit_Cat")
        self.verticalLayout_2.addWidget(self.btnEdit_Cat)
        self.btnDelete_Cat = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnDelete_Cat.setObjectName("btnDelete_Cat")
        self.verticalLayout_2.addWidget(self.btnDelete_Cat)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.tb_main.addTab(self.tb_categories, "")
        self.tb_expenses = QtWidgets.QWidget()
        self.tb_expenses.setObjectName("tb_expenses")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tb_expenses)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 0, 581, 491))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tbl_04 = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        self.tbl_04.setLineWidth(1)
        self.tbl_04.setColumnCount(6)
        self.tbl_04.setObjectName("tbl_04")
        self.tbl_04.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tbl_04.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tbl_04.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tbl_04.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tbl_04.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tbl_04.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_04.setHorizontalHeaderItem(5, item)
        self.horizontalLayout.addWidget(self.tbl_04)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.btnNew_Ex = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnNew_Ex.setObjectName("btnNew_Ex")
        self.verticalLayout.addWidget(self.btnNew_Ex)
        self.btnEdit_Ex = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnEdit_Ex.setObjectName("btnEdit_Ex")
        self.verticalLayout.addWidget(self.btnEdit_Ex)
        self.btnDelete_Ex = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnDelete_Ex.setObjectName("btnDelete_Ex")
        self.verticalLayout.addWidget(self.btnDelete_Ex)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.tb_main.addTab(self.tb_expenses, "")
        self.tb_reports = QtWidgets.QWidget()
        self.tb_reports.setObjectName("tb_reports")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.tb_reports)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(30, 0, 541, 501))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.tbl_8 = QtWidgets.QTableWidget(self.horizontalLayoutWidget_3)
        self.tbl_8.setObjectName("tbl_8")
        self.tbl_8.setColumnCount(3)
        self.tbl_8.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_8.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_8.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_8.setHorizontalHeaderItem(2, item)
        self.horizontalLayout_5.addWidget(self.tbl_8)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.btnRefresh = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnRefresh.setObjectName("btnRefresh")
        self.verticalLayout_5.addWidget(self.btnRefresh)
        self.btnDate_Sort = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnDate_Sort.setObjectName("btnDate_Sort")
        self.verticalLayout_5.addWidget(self.btnDate_Sort)
        self.lblCat_filter = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.lblCat_filter.setObjectName("lblCat_filter")
        self.verticalLayout_5.addWidget(self.lblCat_filter)
        self.cmbCategory_filter = QtWidgets.QComboBox(self.horizontalLayoutWidget_3)
        self.cmbCategory_filter.setObjectName("cmbCategory_filter")
        self.verticalLayout_5.addWidget(self.cmbCategory_filter)
        self.btnMonth_expense = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnMonth_expense.setObjectName("btnMonth_expense")
        self.verticalLayout_5.addWidget(self.btnMonth_expense)
        self.btnYear_expense = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnYear_expense.setObjectName("btnYear_expense")
        self.verticalLayout_5.addWidget(self.btnYear_expense)
        self.btnExp_hundred = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnExp_hundred.setObjectName("btnExp_hundred")
        self.verticalLayout_5.addWidget(self.btnExp_hundred)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem2)
        self.lblTotal = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.lblTotal.setObjectName("lblTotal")
        self.verticalLayout_5.addWidget(self.lblTotal)
        self.txtTotal = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.txtTotal.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txtTotal.sizePolicy().hasHeightForWidth())
        self.txtTotal.setSizePolicy(sizePolicy)
        self.txtTotal.setObjectName("txtTotal")
        self.verticalLayout_5.addWidget(self.txtTotal)
        self.horizontalLayout_5.addLayout(self.verticalLayout_5)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.tb_reports)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(20, 520, 393, 34))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.lblDate_from = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.lblDate_from.setObjectName("lblDate_from")
        self.horizontalLayout_3.addWidget(self.lblDate_from)
        self.dateFrom = QtWidgets.QDateEdit(self.horizontalLayoutWidget_4)
        self.dateFrom.setCalendarPopup(True)
        self.dateFrom.setDate(QtCore.QDate(2025, 7, 1))
        self.dateFrom.setObjectName("dateFrom")
        self.horizontalLayout_3.addWidget(self.dateFrom)
        self.lblDate_to = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.lblDate_to.setObjectName("lblDate_to")
        self.horizontalLayout_3.addWidget(self.lblDate_to)
        self.dateTo = QtWidgets.QDateEdit(self.horizontalLayoutWidget_4)
        self.dateTo.setCalendarPopup(True)
        self.dateTo.setDate(QtCore.QDate(2025, 7, 1))
        self.dateTo.setObjectName("dateTo")
        self.horizontalLayout_3.addWidget(self.dateTo)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.tb_main.addTab(self.tb_reports, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 628, 32))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tb_main.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

#-------------SET UP------------- #
        self.initialSetup()
#-------------------------------- #

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Expense Tracker"))
        item = self.tbl_5.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "category ID"))
        item = self.tbl_5.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "category"))
        self.btnNew_Cat.setText(_translate("MainWindow", "New"))
        self.btnEdit_Cat.setText(_translate("MainWindow", "Edit"))
        self.btnDelete_Cat.setText(_translate("MainWindow", "Delete"))
        self.tb_main.setTabText(self.tb_main.indexOf(self.tb_categories), _translate("MainWindow", "Categories"))
        item = self.tbl_04.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "category_ID"))
        item = self.tbl_04.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "expense_ID"))
        item = self.tbl_04.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "expense_date"))
        item = self.tbl_04.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "expense"))
        item = self.tbl_04.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "amount"))
        item = self.tbl_04.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "notes"))
        self.btnNew_Ex.setText(_translate("MainWindow", "New"))
        self.btnEdit_Ex.setText(_translate("MainWindow", "Edit"))
        self.btnDelete_Ex.setText(_translate("MainWindow", "Delete"))
        self.tb_main.setTabText(self.tb_main.indexOf(self.tb_expenses), _translate("MainWindow", "Expenses"))
        item = self.tbl_8.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "expense date"))
        item = self.tbl_8.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "expense"))
        item = self.tbl_8.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "sum of category"))
        self.btnRefresh.setText(_translate("MainWindow", "Refresh"))
        self.btnDate_Sort.setText(_translate("MainWindow", "Filter by Date Range"))
        self.lblCat_filter.setText(_translate("MainWindow", "Category Filter: "))
        self.btnMonth_expense.setText(_translate("MainWindow", "Current Month Expenses"))
        self.btnYear_expense.setText(_translate("MainWindow", "Current Year Expenses"))
        self.btnExp_hundred.setText(_translate("MainWindow", "Expenses > $100"))
        self.lblTotal.setText(_translate("MainWindow", "Total: "))
        self.lblDate_from.setText(_translate("MainWindow", "Date From: "))
        self.lblDate_to.setText(_translate("MainWindow", "Date To: "))

        item = self.tbl_8.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Expense Date")) # Keep as is
        item = self.tbl_8.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Expense"))      # Keep as is (this is the expense name)
        item = self.tbl_8.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Amount"))       # Changed from "sum of category" to "Amount"

        self.btnRefresh.setText(_translate("MainWindow", "Refresh All Expenses"))
        self.tb_main.setTabText(self.tb_main.indexOf(self.tb_reports), _translate("MainWindow", "Reports"))

    
    ####################      End UI Generation   ########################

    def initialSetup(self):

        #Category Buttuns
        self.btnNew_Cat.clicked.connect(self.btnNew_clicked)
        self.btnEdit_Cat.clicked.connect(self.btnEdit_clicked_cat)
        self.btnDelete_Cat.clicked.connect(self.btnDelete_clicked)

        #Expenses Buttons
        self.btnNew_Ex.clicked.connect(self.open_expenses_dialog)
        self.btnEdit_Ex.clicked.connect(self.btnEdit_clicked_ex)
        self.btnDelete_Ex.clicked.connect(self.btnDelete_Ex_clicked)

        #Reports Buttons
        self.btnRefresh.clicked.connect(self.refresh_reports)
        self.btnDate_Sort.clicked.connect(self.filter_expenses_by_date)
        self.btnMonth_expense.clicked.connect(self.filter_current_month_expenses)
        self.btnYear_expense.clicked.connect(self.filter_current_year_expenses)
        #refresh reports
        #self.btnNew_Rep.clicked.connect(self.refresh_reports)

        # Connect the new button for expenses > $100
        self.btnExp_hundred.clicked.connect(self.filter_expenses_over_hundred)

        self.tbl_8.setHorizontalHeaderItem(0, QtWidgets.QTableWidgetItem("Expense Date"))
        self.tbl_8.setHorizontalHeaderItem(1, QtWidgets.QTableWidgetItem("Expense"))
        self.tbl_8.setHorizontalHeaderItem(2, QtWidgets.QTableWidgetItem("Amount"))

        #connect to database
        self.connect()
        if self.cnx:
            self.refresh_catDB()
            self.refresh_exDB()
            self.refresh_reports()
            
            # Category filter set-up
            self.populate_category_filter()
            self.cmbCategory_filter.currentIndexChanged.connect(self.filter_by_category)


    #########################################################
    #                                                       #
    #                       Events                          #
    #                                                       #
    #
    #########################################################


    #----------CATEGORY TAB BUTTONS----------#

    def btnNew_clicked(self):
        Dialog = QtWidgets.QDialog()
        form = Categories.Ui_dialog()
        form.setupUi(Dialog, None)
        if Dialog.exec_() == QtWidgets.QDialog.Accepted:
            listValues = form.getValues()
            self.insert_catDB(listValues)
            self.refresh_catDB()
            self.refresh_exDB()
            

    def btnEdit_clicked_cat(self):
        currentRow = self.tbl_5.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Selected No Row", "Please select a row to edit")
            return

        category_ID = self.tbl_5.item(currentRow, 0).text()
        category_name = self.tbl_5.item(currentRow, 1).text()

        Dialog = QtWidgets.QDialog()
        form = Categories.Ui_dialog()
        form.setupUi(Dialog, [category_name])

        if Dialog.exec_() == QtWidgets.QDialog.Accepted:
            updatedValues = form.getValues()
            if len(updatedValues) == 1:
                self.update_catDB([category_ID, updatedValues[0]])
                self.refresh_catDB()
                self.refresh_exDB()
                

    def btnDelete_clicked(self):
        currentRow = self.tbl_5.currentRow()
        if currentRow == -1:
            QMessageBox.warning(None, "No Selected Row", "Please select a row first")
            return

        category_ID_item = self.tbl_5.item(currentRow, 0)
        if category_ID_item is None:
            QMessageBox.warning(None, "Error", "Could not read category ID")
            return

        category_ID = category_ID_item.text()

        answer = QMessageBox.question(
            None, "Delete row?", "Are you sure you want to delete category ID"
                                 " This will also delete associated expenses.",
            QMessageBox.Yes | QMessageBox.No)
        
        if answer == QMessageBox.Yes:
                self.delete_catDB(category_ID)
                self.refresh_catDB()
                self.refresh_exDB()
                self.refresh_reports()

    
    #----------Expenses TAB BUTTONS----------#

    #new button 
    def open_expenses_dialog(self):
        dialog = QtWidgets.QDialog()
        form = dialog_expenses.Ui_dialog_expenses()
        form.setupUi(dialog)

        categories = []
        
        #TRY CATCH TO GET DATA FROM CATAGORIES TABLE 
        #Source: https://gis.stackexchange.com/questions/291696/fill-a-combobox-with-the-result-of-a-query-to-sqlserver
        cursor = self.cnx.cursor()
        cursor.execute("SELECT category_ID, category FROM Categories ORDER BY category")
        for cat_id, cat_name in cursor:
            categories.append((str(cat_id), cat_name))
        cursor.close()
       
        ##Defined in dialog_expenses_py
        #populates combo box
        form.populate_categories(categories)

        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            values = form.getValues()


            self.insert_exDB(values)
            self.refresh_exDB()
            self.refresh_reports()

    def btnEdit_clicked_ex(self):
        currentRow = self.tbl_04.currentRow()

        #makes sure row is selected
        if currentRow == -1:
            QMessageBox.warning(None, "Selected Row", "Please select an expense row first")
            return

        original_category_id = self.tbl_04.item(currentRow, 0).text()
        original_expense_id = self.tbl_04.item(currentRow, 1).text()
        original_expense_date = self.tbl_04.item(currentRow, 2).text()
        original_expense_name_display = self.tbl_04.item(currentRow, 3).text()
        original_amount = self.tbl_04.item(currentRow, 4).text()
        original_notes = self.tbl_04.item(currentRow, 5).text() if self.tbl_04.item(currentRow, 5) else ""

        listValues_for_dialog = [
            original_category_id,
            original_expense_date,
            original_expense_name_display,
            original_amount,
            original_notes]

        dialog = QtWidgets.QDialog()
        form = dialog_expenses.Ui_dialog_expenses()
        form.setupUi(dialog)

        #Gets Categories from Database Again 
        categories = []
        try:
            cursor = self.cnx.cursor()
            cursor.execute("SELECT category_ID, category FROM Categories ORDER BY category")
            for cat_id, cat_name in cursor:
                categories.append((str(cat_id), cat_name))
            cursor.close()
        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Database Error", f"Error fetching categories for dialog: {err}")
            return
        
        #Defined in dialog_expenses_py
        form.populate_categories(categories)

        
        
        form.cmb_exp_cat.setCurrentIndex(
        form.cmb_exp_cat.findData(original_category_id)
        )
        ##put dat it right format 
        form.date_exp.setDate(QtCore.QDate.fromString(original_expense_date, "yyyy-MM-dd"))
        form.txt_exp_name.setText(original_expense_name_display)
        form.txt_exp_amount.setText(original_amount)
        form.txt_exp_notes.setText(original_notes)

        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # updatedValues from dialog: (new_category_id_str, new_expense_date_str, new_expense_name_str, new_amount_str, new_notes_str)
            updatedValues = form.getValues()

            self.update_exDB(updatedValues + [original_expense_id,])
            self.refresh_exDB()
            self.refresh_reports()
            

    def btnDelete_Ex_clicked(self):
        currentRow = self.tbl_04.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Selected Row", "Please select an expense row first")
            return

        expense_ID_item = self.tbl_04.item(currentRow, 1)  # Expense ID column
        if expense_ID_item is None:
            QMessageBox.warning(None, "Error", "Could not read expense ID")
            return

        expense_ID = expense_ID_item.text()

        answer = QMessageBox.question(None, "Delete row?", f"Are you sure you want to delete expense ID {expense_ID}?",
                                      QMessageBox.Yes | QMessageBox.No)
        if answer == QMessageBox.Yes:
            self.delete_exDB(expense_ID)
            self.refresh_exDB()
            self.refresh_reports()
           

    #----------REFRESH TAB ----------#
    #Sources:  https://codeloop.org/pyqt5-tutorial-retrieve-data-from-mysql-in-qtablewidget/
                
    

    def refresh_reports(self):
        self.tbl_8.setRowCount(0) # Clear existing data
        self.txtTotal.setText("") # Clear total

        if not self.cnx:
            QMessageBox.critical(None, "Database Error", "Not connected to the database.")
            return

        total_expenses = 0.0 # Initialize total

        try:
            cursor = self.cnx.cursor()
            # New query to fetch individual expenses
            query = """
                     SELECT expense_date, expense, amount
                     FROM Expenses
                     ORDER BY expense_date DESC, expense_ID DESC
                     """
            cursor.execute(query)

            for expense_date_db, expense_name_db, amount_db in cursor:
                row = self.tbl_8.rowCount()
                self.tbl_8.insertRow(row)

                # Populate columns as desired: Date, Expense Name, Amount
                self.tbl_8.setItem(row, 0, QTableWidgetItem(str(expense_date_db))) # Column 0: expense date
                self.tbl_8.setItem(row, 1, QTableWidgetItem(expense_name_db))      # Column 1: expense name
                self.tbl_8.setItem(row, 2, QTableWidgetItem(f"{amount_db:.2f}"))   # Column 2: amount

                total_expenses += float(amount_db)

            cursor.close()
            self.txtTotal.setText(f"{total_expenses:.2f}") # Display calculated total

        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Database Error", f"Error refreshing report: {err}")



    #########################################################################
    #                                                                       #
    #                              DATABASE                                    #
    #                                                                       #
    #########################################################################
    ##DATABASE SOURCES:
        #Connector : https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
        #Try Catch for Database: https://www.index.dev/blog/python-database-error-handling-try-except
                     

    def setupDatabase(self):
        self.connect()

    #change ps per user
    def connect(self):
        self.cnx = mysql.connector.connect(user='root',
                                               password='123456789',
                                               host='127.0.0.1',
                                               database='homework04')
        

    #####------CATEGORIES TABLE-------##########
        
    def refresh_catDB(self):

        self.tbl_5.setRowCount(0)
        if not self.cnx:
            return

        cursor = self.cnx.cursor()
        query = "SELECT category_ID, category FROM Categories ORDER BY category_ID"
        cursor.execute(query)

        for (category_ID, category_name) in cursor:
            rowCount = self.tbl_5.rowCount()
            self.tbl_5.insertRow(rowCount)
            self.tbl_5.setItem(rowCount, 0, QTableWidgetItem(str(category_ID)))
            self.tbl_5.setItem(rowCount, 1, QTableWidgetItem(category_name))

        cursor.close()

    def insert_catDB(self, a_listValues):
        if not self.cnx:
            return

        cursor = self.cnx.cursor()
        query = "INSERT INTO Categories (category) VALUES (%s)"
        if len(a_listValues) == 1:
            cursor.execute(query, [a_listValues[0]])
            self.cnx.commit()
        cursor.close()

    def update_catDB(self, a_listValues):
        if not self.cnx: return
        cursor = self.cnx.cursor()

        query = "UPDATE Categories SET category = %s  WHERE category_ID = %s"
        # a_listValues[0] is original category_ID, a_listValues[1] is new category name
        cursor.execute(query, [a_listValues[1], a_listValues[0]])
        self.cnx.commit()
        cursor.close()

    def delete_catDB(self, a_ID):
        if not self.cnx: return
        cursor = self.cnx.cursor()
        try:
            query = "DELETE FROM Categories WHERE category_ID = %s"
            cursor.execute(query, (a_ID,))
            self.cnx.commit()
        except mysql.connector.Error as err:
            raise err
        finally:
            cursor.close()

    ####------EXPENSES TABLE-------##########

    def refresh_exDB(self):
        self.tbl_04.setRowCount(0)
        if not self.cnx: return

        cursor = self.cnx.cursor()
        query = "SELECT category_ID, expense_ID, expense_date, expense, amount, notes FROM Expenses ORDER BY expense_date DESC, expense_ID DESC"
        cursor.execute(query)

        for (category_ID, expense_ID, expense_date, expense_val, amount, notes) in cursor:
                rowCount = self.tbl_04.rowCount()
                self.tbl_04.insertRow(rowCount)
                self.tbl_04.setItem(rowCount, 0, QTableWidgetItem(str(category_ID)))
                self.tbl_04.setItem(rowCount, 1, QTableWidgetItem(str(expense_ID)))
                self.tbl_04.setItem(rowCount, 2, QTableWidgetItem(str(expense_date)))  # date object to string
                self.tbl_04.setItem(rowCount, 3, QTableWidgetItem(expense_val))
                self.tbl_04.setItem(rowCount, 4, QTableWidgetItem(f"{amount:.2f}"))
                self.tbl_04.setItem(rowCount, 5,
                                    QTableWidgetItem(notes if notes is not None else ""))
        
        cursor.close()

    def insert_exDB(self, a_listValues):
        # a_listValues: (category_id, expense_date, expense_name_from_dialog, amount, notes)
        if not self.cnx:
            return
        cursor = self.cnx.cursor()
        
        query = """
                    INSERT INTO Expenses (category_ID, expense_date, expense, amount, notes)
                    VALUES (%s, %s, %s, %s, %s) \
                    """
        category_id, expense_date, expense_dialog_name, amount, notes = a_listValues

        amount_float = float(amount)
        notes_db = notes if notes else None

        cursor.execute(query, (category_id, expense_date, expense_dialog_name, amount_float, notes_db))
        self.cnx.commit()
        cursor.close()

    def update_exDB(self, a_listValues):
        # a_listValues: (new_category_id, new_expense_date, new_expense_name_from_dialog, new_amount, new_notes, original_expense_id)
        if not self.cnx: return
        cursor = self.cnx.cursor()

        query = """
                    UPDATE Expenses
                    SET category_ID  = %s, \
                        expense_date = %s, \
                        expense      = %s, \
                        amount       = %s, \
                        notes        = %s
                    WHERE expense_ID = %s \
                    """
        new_category_id, new_expense_date, new_expense_dialog_name, new_amount, new_notes, original_expense_id = a_listValues

        new_amount_float = float(new_amount)
        new_notes_db = new_notes if new_notes else None

        cursor.execute(query,
                           (new_category_id, new_expense_date, new_expense_dialog_name, new_amount_float, new_notes_db,
                            original_expense_id))
        self.cnx.commit()
        

    def delete_exDB(self, a_ID):
        # a_ID: the expense_ID to delete
        if not self.cnx: return
        cursor = self.cnx.cursor()
        query = "DELETE FROM Expenses WHERE expense_ID = %s"
        cursor.execute(query, (a_ID,))
        self.cnx.commit()
        cursor.close()

    def filter_expenses_by_date(self):
        # Get dates from QDateEdit widgets
        date_from_str = self.dateFrom.date().toString("yyyy-MM-dd")
        date_to_str = self.dateTo.date().toString("yyyy-MM-dd")

        self._filter_expenses_by_date_range(date_from_str, date_to_str)

    def _filter_expenses_by_date_range(self, start_date_str, end_date_str):
        """
        Helper method to filter and display expenses within a specified date range.
        Takes date strings in 'YYYY-MM-DD' format.
        """
        self.tbl_8.setRowCount(0) # Clear existing data
        self.txtTotal.setText("") # Clear total

        if not self.cnx:
            QMessageBox.critical(None, "Database Error", "Not connected to the database.")
            return

        total_filtered_expenses = 0.0

        try:
            cursor = self.cnx.cursor()
            query = """
                     SELECT expense_date, expense, amount
                     FROM Expenses
                     WHERE expense_date BETWEEN %s AND %s
                     ORDER BY expense_date ASC, expense_ID ASC
                     """
            cursor.execute(query, (start_date_str, end_date_str))

            for expense_date_db, expense_name_db, amount_db in cursor:
                row = self.tbl_8.rowCount()
                self.tbl_8.insertRow(row)
                self.tbl_8.setItem(row, 0, QTableWidgetItem(str(expense_date_db)))
                self.tbl_8.setItem(row, 1, QTableWidgetItem(expense_name_db))
                self.tbl_8.setItem(row, 2, QTableWidgetItem(f"{amount_db:.2f}"))
                total_filtered_expenses += float(amount_db)

            cursor.close()
            self.txtTotal.setText(f"{total_filtered_expenses:.2f}")

        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Database Error", f"Error filtering expenses: {err}")


    def filter_current_month_expenses(self):
        today = QtCore.QDate.currentDate()
        first_day_of_month = QtCore.QDate(today.year(), today.month(), 1)
        last_day_of_month = QtCore.QDate(today.year(), today.month(), 1).addMonths(1).addDays(-1)

        start_date_str = first_day_of_month.toString("yyyy-MM-dd")
        end_date_str = last_day_of_month.toString("yyyy-MM-dd")

        self._filter_expenses_by_date_range(start_date_str, end_date_str)


    def filter_current_year_expenses(self):
        today = QtCore.QDate.currentDate()
        first_day_of_year = QtCore.QDate(today.year(), 1, 1) # January 1st of current year
        last_day_of_year = QtCore.QDate(today.year(), 12, 31) # December 31st of current year

        start_date_str = first_day_of_year.toString("yyyy-MM-dd")
        end_date_str = last_day_of_year.toString("yyyy-MM-dd")

        self._filter_expenses_by_date_range(start_date_str, end_date_str)


    def filter_expenses_over_hundred(self):
        self.tbl_8.setRowCount(0) # Clear existing data
        self.txtTotal.setText("") # Clear total

        if not self.cnx:
            QMessageBox.critical(None, "Database Error", "Not connected to the database.")
            return

        total_filtered_expenses = 0.0

        try:
            cursor = self.cnx.cursor()
            # SQL query to select expenses where amount is greater than 100
            query = """
                     SELECT expense_date, expense, amount
                     FROM Expenses
                     WHERE amount > 100.00
                     ORDER BY amount DESC, expense_date DESC
                     """
            cursor.execute(query)

            for expense_date_db, expense_name_db, amount_db in cursor:
                row = self.tbl_8.rowCount()
                self.tbl_8.insertRow(row)

                # Populate columns: Date, Expense Name, Amount
                self.tbl_8.setItem(row, 0, QTableWidgetItem(str(expense_date_db)))
                self.tbl_8.setItem(row, 1, QTableWidgetItem(expense_name_db))
                # puts amount to 2 decimal places
                self.tbl_8.setItem(row, 2, QTableWidgetItem(f"{amount_db:.2f}"))

                total_filtered_expenses += float(amount_db)

            cursor.close()
            self.txtTotal.setText(f"{total_filtered_expenses:.2f}")

        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Database Error", f"Error filtering expenses > $100: {err}")

    #populates category filter combo box similar to the one in the dialog_expenses.py
    def populate_category_filter(self):
        self.cmbCategory_filter.clear()
        self.cmbCategory_filter.addItem("All Categories", None) 
        cursor = self.cnx.cursor()
        query = "SELECT category_ID, category FROM Categories ORDER BY category"
        cursor.execute(query)

        for cat_id, cat_name in cursor:
            self.cmbCategory_filter.addItem(cat_name, cat_id)  
        cursor.close()


    #filter by Category Combo Box 
    def filter_by_category(self):
        self.tbl_8.setRowCount(0) 
        self.txtTotal.setText("")
        selected_cat_id = self.cmbCategory_filter.currentData() 

    
        cursor = self.cnx.cursor()

        #quieries 
        # If no category is selected, then all expenses
        if selected_cat_id is None:
            query = """SELECT expense_date, expense, amount
                FROM Expenses
                ORDER BY expense_date DESC, expense_ID DESC """
            cursor.execute(query)
        else:
            query = """
                SELECT expense_date, expense, amount
                FROM Expenses
                WHERE category_ID = %s
                ORDER BY expense_date DESC, expense_ID DESC"""
            
            cursor.execute(query, (selected_cat_id,))


        #totals all in the category
        total = 0.0
        for expense_date_db, expense_name_db, amount_db in cursor:
            row = self.tbl_8.rowCount()
            self.tbl_8.insertRow(row)
            self.tbl_8.setItem(row, 0, QTableWidgetItem(str(expense_date_db)))
            self.tbl_8.setItem(row, 1, QTableWidgetItem(expense_name_db))

            # puts in 2 decimal places 
            self.tbl_8.setItem(row, 2, QTableWidgetItem(f"{amount_db:.2f}"))
            total += float(amount_db)

        cursor.close()
        # Set the total in the txtTotal field
        self.txtTotal.setText(f"{total:.2f}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
