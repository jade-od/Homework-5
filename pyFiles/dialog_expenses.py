# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\dialog_expenses.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_dialog_expenses(object):
    def setupUi(self, dialog_expenses):
        dialog_expenses.setObjectName("dialog_expenses")
        dialog_expenses.resize(400, 300)
        dialog_expenses.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        dialog_expenses.setMouseTracking(False)
        self.buttonBox = QtWidgets.QDialogButtonBox(dialog_expenses)
        self.buttonBox.setGeometry(QtCore.QRect(40, 250, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(dialog_expenses)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 371, 231))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lbl_exp_cat = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lbl_exp_cat.setObjectName("lbl_exp_cat")
        self.horizontalLayout.addWidget(self.lbl_exp_cat)
        self.cmb_exp_cat = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmb_exp_cat.setObjectName("cmb_exp_cat")
        self.horizontalLayout.addWidget(self.cmb_exp_cat)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lbl_exp_date = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lbl_exp_date.setObjectName("lbl_exp_date")
        self.horizontalLayout_2.addWidget(self.lbl_exp_date)
        self.date_exp = QtWidgets.QDateEdit(self.verticalLayoutWidget)
        self.date_exp.setCalendarPopup(True)
        self.date_exp.setDate(QtCore.QDate(2025, 6, 23))
        self.date_exp.setObjectName("date_exp")
        self.horizontalLayout_2.addWidget(self.date_exp)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lbl_exp_name = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lbl_exp_name.setObjectName("lbl_exp_name")
        self.horizontalLayout_3.addWidget(self.lbl_exp_name)
        self.txt_exp_name = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.txt_exp_name.setObjectName("txt_exp_name")
        self.horizontalLayout_3.addWidget(self.txt_exp_name)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.lbl_exp_amount = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lbl_exp_amount.setObjectName("lbl_exp_amount")
        self.horizontalLayout_4.addWidget(self.lbl_exp_amount)
        self.txt_exp_amount = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.txt_exp_amount.setObjectName("txt_exp_amount")
        self.horizontalLayout_4.addWidget(self.txt_exp_amount)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lbl_exp_notes = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lbl_exp_notes.setObjectName("lbl_exp_notes")
        self.horizontalLayout_5.addWidget(self.lbl_exp_notes)
        self.txt_exp_notes = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.txt_exp_notes.setObjectName("txt_exp_notes")
        self.horizontalLayout_5.addWidget(self.txt_exp_notes)
        self.verticalLayout.addLayout(self.horizontalLayout_5)

        self.retranslateUi(dialog_expenses)
        self.buttonBox.accepted.connect(dialog_expenses.accept) # type: ignore
        self.buttonBox.rejected.connect(dialog_expenses.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(dialog_expenses)

    def retranslateUi(self, dialog_expenses):
        _translate = QtCore.QCoreApplication.translate
        dialog_expenses.setWindowTitle(_translate("dialog_expenses", "Input/Edit Expenses"))
        self.lbl_exp_cat.setText(_translate("dialog_expenses", "Category:"))
        self.lbl_exp_date.setText(_translate("dialog_expenses", "Date of Expense:"))
        self.lbl_exp_name.setText(_translate("dialog_expenses", "Expense Name: "))
        self.lbl_exp_amount.setText(_translate("dialog_expenses", "Amount: "))
        self.lbl_exp_notes.setText(_translate("dialog_expenses", "Notes: "))


    #POPULATE COMBO BOX FUNCTION: 
    #Source: https://gis.stackexchange.com/questions/291696/fill-a-combobox-with-the-result-of-a-query-to-sqlserver
        
    def populate_categories(self, categories):
        self.cmb_exp_cat.clear()
        for cat_id, cat_name in sorted(categories, key=lambda x: x[1].lower()):
            self.cmb_exp_cat.addItem(cat_name, cat_id)

    #Gets values for Database
    def getValues(self):
        category_id = self.cmb_exp_cat.currentData()
        date = self.date_exp.date().toString("yyyy-MM-dd")
        name = self.txt_exp_name.text()
        amount = self.txt_exp_amount.text()
        notes = self.txt_exp_notes.text()
        return [str(category_id), date, name, amount, notes]



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    dialog_expenses = QtWidgets.QDialog()
    ui = Ui_dialog_expenses()
    ui.setupUi(dialog_expenses)
    dialog_expenses.show()
    sys.exit(app.exec_())
